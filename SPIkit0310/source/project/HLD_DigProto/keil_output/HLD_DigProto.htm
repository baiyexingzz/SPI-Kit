<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\keil_output\HLD_DigProto.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\keil_output\HLD_DigProto.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 76]: Last Updated: Thu Apr 30 11:11:04 2015
<BR><P>
<H3>Maximum Stack Usage =        552 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; USB_getCmd &rArr; Instruction_vGetCmd &rArr; Measure_iStoreDLPpat3FullIns &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[51]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[31]">DAC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[31]">DAC_IRQHandler</a><BR>
 <LI><a href="#[d3]">SYSTICK_vISR</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[32]">ACMP0_IRQHandler</a> from interrupt.o(i.ACMP0_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[33]">ACMP1_IRQHandler</a> from interrupt.o(i.ACMP1_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[34]">ACMP2_IRQHandler</a> from interrupt.o(i.ACMP2_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[35]">ACMP3_IRQHandler</a> from interrupt.o(i.ACMP3_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[29]">ADC0A_IRQHandler</a> from interrupt.o(i.ADC0A_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[2a]">ADC0B_IRQHandler</a> from interrupt.o(i.ADC0B_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[2c]">ADC0_OVR_IRQHandler</a> from interrupt.o(i.ADC0_OVR_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[2b]">ADC0_THCMP_IRQHandler</a> from interrupt.o(i.ADC0_THCMP_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[2d]">ADC1A_IRQHandler</a> from interrupt.o(i.ADC1A_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[2e]">ADC1B_IRQHandler</a> from interrupt.o(i.ADC1B_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[30]">ADC1_OVR_IRQHandler</a> from interrupt.o(i.ADC1_OVR_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[2f]">ADC1_THCMP_IRQHandler</a> from interrupt.o(i.ADC1_THCMP_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[b]">BOD_IRQHandler</a> from interrupt.o(i.BOD_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[25]">CAN_IRQHandler</a> from interrupt.o(i.CAN_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[31]">DAC_IRQHandler</a> from keil_startup_lpc15xx.o(.text) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[e]">DMA_IRQHandler</a> from interrupt.o(i.DMA_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[d]">EEPROM_IRQHandler</a> from interrupt.o(i.EEPROM_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[c]">FMC_IRQHandler</a> from interrupt.o(i.FMC_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[f]">GINT0_IRQHandler</a> from interrupt.o(i.GINT0_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[10]">GINT1_IRQHandler</a> from interrupt.o(i.GINT1_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[6]">HardFault_Handler</a> from interrupt.o(i.HardFault_Handler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[22]">I2C0_IRQHandler</a> from interrupt.o(i.I2C0_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[1e]">MRT_IRQHandler</a> from interrupt.o(i.MRT_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[5]">NMI_Handler</a> from interrupt.o(i.NMI_Handler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[11]">PIN_INT0_IRQHandler</a> from interrupt.o(i.PIN_INT0_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[12]">PIN_INT1_IRQHandler</a> from interrupt.o(i.PIN_INT1_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[13]">PIN_INT2_IRQHandler</a> from interrupt.o(i.PIN_INT2_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[14]">PIN_INT3_IRQHandler</a> from interrupt.o(i.PIN_INT3_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[15]">PIN_INT4_IRQHandler</a> from interrupt.o(i.PIN_INT4_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[16]">PIN_INT5_IRQHandler</a> from interrupt.o(i.PIN_INT5_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[17]">PIN_INT6_IRQHandler</a> from interrupt.o(i.PIN_INT6_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[18]">PIN_INT7_IRQHandler</a> from interrupt.o(i.PIN_INT7_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from interrupt.o(i.PendSV_Handler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[36]">QEI_IRQHandler</a> from interrupt.o(i.QEI_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[19]">RIT_IRQHandler</a> from interrupt.o(i.RIT_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[37]">RTC_ALARM_IRQHandler</a> from interrupt.o(i.RTC_ALARM_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[38]">RTC_WAKE_IRQHandler</a> from interrupt.o(i.RTC_WAKE_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[4]">Reset_Handler</a> from keil_startup_lpc15xx.o(.text) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[1a]">SCT0_IRQHandler</a> from interrupt.o(i.SCT0_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[1b]">SCT1_IRQHandler</a> from interrupt.o(i.SCT1_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[1c]">SCT2_IRQHandler</a> from interrupt.o(i.SCT2_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[1d]">SCT3_IRQHandler</a> from interrupt.o(i.SCT3_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[23]">SPI0_IRQHandler</a> from interrupt.o(i.SPI0_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[24]">SPI1_IRQHandler</a> from interrupt.o(i.SPI1_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[7]">SVC_Handler</a> from interrupt.o(i.SVC_Handler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from interrupt.o(i.SysTick_Handler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[39]">SystemInit</a> from sysinit.o(i.SystemInit) referenced from keil_startup_lpc15xx.o(.text)
 <LI><a href="#[1f]">UART0_IRQHandler</a> from interrupt.o(i.UART0_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[20]">UART1_IRQHandler</a> from interrupt.o(i.UART1_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[21]">UART2_IRQHandler</a> from interrupt.o(i.UART2_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[28]">USBWakeup_IRQHandler</a> from interrupt.o(i.USBWakeup_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[27]">USB_FIQHandler</a> from interrupt.o(i.USB_FIQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[26]">USB_IRQHandler</a> from interrupt.o(i.USB_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[3b]">VCOM_SetLineCode</a> from cdc_vcom.o(i.VCOM_SetLineCode) referenced from cdc_vcom.o(i.vcom_init)
 <LI><a href="#[3c]">VCOM_bulk_in_hdlr</a> from cdc_vcom.o(i.VCOM_bulk_in_hdlr) referenced from cdc_vcom.o(i.vcom_init)
 <LI><a href="#[3d]">VCOM_bulk_out_hdlr</a> from cdc_vcom.o(i.VCOM_bulk_out_hdlr) referenced from cdc_vcom.o(i.vcom_init)
 <LI><a href="#[a]">WDT_IRQHandler</a> from interrupt.o(i.WDT_IRQHandler) referenced from keil_startup_lpc15xx.o(RESET)
 <LI><a href="#[3e]">__main</a> from __main.o(!!!main) referenced from keil_startup_lpc15xx.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[3e]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3f]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[41]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[e6]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e7]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[e8]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[e9]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[ea]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[45]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[eb]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ec]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[ed]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[ee]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[ef]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[f0]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[f1]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[f2]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[f3]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[f4]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[f5]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[f6]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[f7]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[f8]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[f9]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[fa]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[fb]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[fc]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[fd]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[fe]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[4a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[ff]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[100]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[101]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[102]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[103]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[104]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[40]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[105]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[42]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[44]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[106]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[46]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 552 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; USB_getCmd &rArr; Instruction_vGetCmd &rArr; Measure_iStoreDLPpat3FullIns &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[107]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[52]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[49]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[108]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[4b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, keil_startup_lpc15xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>Reserved_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, keil_startup_lpc15xx.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reserved_IRQHandler
</UL>

<P><STRONG><a name="[31]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, keil_startup_lpc15xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DAC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, keil_startup_lpc15xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_bread
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tFlashWrite
</UL>

<P><STRONG><a name="[4e]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[109]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetSubframeEESetting
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetRedPacketEESetting
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetGreenPacketEESetting
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetGapEESetting
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetBluePacketEESetting
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat3FullIns
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat2FullIns
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat1FullIns
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_init
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10c]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[10e]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[10f]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[110]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[50]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[111]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[4f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[112]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[114]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[43]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[48]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[4c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[115]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[116]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[32]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.ACMP0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ACMP0_IRQHandler &rArr; ACMP0_vISR
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[117]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[53]"></a>ACMP0_vISR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, acmp.o(i.ACMP0_vISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACMP0_vISR
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_vClearIntStatus
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_bGetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>

<P><STRONG><a name="[33]"></a>ACMP1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.ACMP1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ACMP1_IRQHandler &rArr; ACMP1_vISR
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>ACMP1_vISR</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, acmp.o(i.ACMP1_vISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACMP1_vISR
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_vClearIntStatus
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP_bGetIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_IRQHandler
</UL>

<P><STRONG><a name="[34]"></a>ACMP2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.ACMP2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACMP2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP2_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>ACMP2_vISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, acmp.o(i.ACMP2_vISR))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP2_IRQHandler
</UL>

<P><STRONG><a name="[35]"></a>ACMP3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.ACMP3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ACMP3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP3_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ACMP3_vISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, acmp.o(i.ACMP3_vISR))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP3_IRQHandler
</UL>

<P><STRONG><a name="[29]"></a>ADC0A_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.ADC0A_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>ADC0B_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.ADC0B_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ADC0_OVR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.ADC0_OVR_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>ADC0_THCMP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.ADC0_THCMP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ADC1A_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.ADC1A_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC1A_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_SeqA_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>ADC1B_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.ADC1B_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>ADC1_OVR_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.ADC1_OVR_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>ADC1_SeqA_vISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adc.o(i.ADC1_SeqA_vISR))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1A_IRQHandler
</UL>

<P><STRONG><a name="[2f]"></a>ADC1_THCMP_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.ADC1_THCMP_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>BOD_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.BOD_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.CAN_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[aa]"></a>CRC_ubCrc8</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, measure.o(i.CRC_ubCrc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC_ubCrc8
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreSubframeFullIns
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreSubframe
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreKengtimeFullIns
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreKengtime
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat3FullIns
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat3
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat2FullIns
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat2
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat1FullIns
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat1
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadSubframe
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadKengtime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadDLPpat3
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadDLPpat2
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadDLPpat1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vStoreColorSeqToEE
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vReadColorSeqFromEE
</UL>

<P><STRONG><a name="[5a]"></a>Chip_SetupXtalClocking</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, system.o(i.Chip_SetupXtalClocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_SetupXtalClocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_vPowerUp
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_vSetMainBClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_vInit
</UL>

<P><STRONG><a name="[5d]"></a>Chip_USB_Init</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, cdc_vcom.o(i.Chip_USB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Chip_USB_Init &rArr; SYSCTL_vPeriphReset
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_vPeriphReset
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_vPowerUp
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_init
</UL>

<P><STRONG><a name="[e]"></a>DMA_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA_vISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dma.o(i.DMA_vISR))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>EEPROM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.EEPROM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>FMC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.FMC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>GINT0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.GINT0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>GINT1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.GINT1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, interrupt.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.I2C0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>IAP_tCopyRamToFlash</STRONG> (Thumb, 50 bytes, Stack size 56 bytes, iap.o(i.IAP_tCopyRamToFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IAP_tCopyRamToFlash &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_vEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tFlashWrite
</UL>

<P><STRONG><a name="[64]"></a>IAP_tErasePage</STRONG> (Thumb, 46 bytes, Stack size 56 bytes, iap.o(i.IAP_tErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IAP_tErasePage &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_vEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tFlashWrite
</UL>

<P><STRONG><a name="[65]"></a>IAP_tPreSectorForWrite</STRONG> (Thumb, 32 bytes, Stack size 56 bytes, iap.o(i.IAP_tPreSectorForWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_vEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tFlashWrite
</UL>

<P><STRONG><a name="[66]"></a>INTERRUPT_vInit</STRONG> (Thumb, 550 bytes, Stack size 8 bytes, interrupt.o(i.INTERRUPT_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = INTERRUPT_vInit &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[69]"></a>IO_SWM_vEnableFixedPinZ</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, io.o(i.IO_SWM_vEnableFixedPinZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IO_SWM_vEnableFixedPinZ
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_SWM_vEnableFixedPin
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCT1_Init
</UL>

<P><STRONG><a name="[6b]"></a>IO_SWM_vMovablePinAssignZ</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, io.o(i.IO_SWM_vMovablePinAssignZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IO_SWM_vMovablePinAssignZ &rArr; IO_SWM_vMovablePinAssign
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_SWM_vMovablePinAssign
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCT1_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCT0_Init
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6d]"></a>IO_bInit</STRONG> (Thumb, 632 bytes, Stack size 24 bytes, io.o(i.IO_bInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IO_bInit &rArr; IO_GPIO_vSetDir
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_vPeriphReset
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_SWM_vMovablePinAssign
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_SWM_vEnableFixedPin
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_SWM_vDisableFixedPin
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIO_vSetDir
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_DIOCON_vConfig
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_vEnablePeriphClock
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[72]"></a>Instruction_vGetCmd</STRONG> (Thumb, 1634 bytes, Stack size 8 bytes, instruction.o(i.Instruction_vGetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = Instruction_vGetCmd &rArr; Measure_iStoreDLPpat3FullIns &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetSubframeEESetting
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetRedPacketEESetting
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetGreenPacketEESetting
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetGapEESetting
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetBluePacketEESetting
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreSubframeFullIns
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreSubframe
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreKengtimeFullIns
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreKengtime
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat3FullIns
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat3
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat2FullIns
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat2
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat1FullIns
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat1
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iSetAutoPlay
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadSubframe
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadKengtime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadDLPpat3
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadDLPpat2
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadDLPpat1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vStoreColorSeqToEE
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vSetSubframePeriod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vSetKengTime
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vGetSubframePeriod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vGerKengTime
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCTRL_vGetColorSEQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vReadColorSeqFromEE
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModeSel
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSetWholePacket
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSetPartPacket
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSetGapTime
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_vGetPacketParas
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vStoreData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vSetSubframeEESetting
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vSetRedPktEESetting
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vSetGreenPktEESetting
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vSetGapEESetting
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vSetBluePktEESetting
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_getCmd
</UL>

<P><STRONG><a name="[9c]"></a>MEMORY_tFlashWrite</STRONG> (Thumb, 244 bytes, Stack size 312 bytes, memory.o(i.MEMORY_tFlashWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRemapStatus
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tPreSectorForWrite
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tErasePage
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tCopyRamToFlash
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
</UL>

<P><STRONG><a name="[9e]"></a>MEMORY_tInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, memory.o(i.MEMORY_tInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MEMORY_tInit &rArr; EEPROM_vInit &rArr; SYSCTL_vPeriphReset
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_vInit
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[9f]"></a>MEMORY_tRead</STRONG> (Thumb, 244 bytes, Stack size 80 bytes, memory.o(i.MEMORY_tRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MEMORY_tRead &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRemapStatus
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_vEntry
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetSubframeEESetting
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetRedPacketEESetting
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetGreenPacketEESetting
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetGapEESetting
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetBluePacketEESetting
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadSubframe
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadKengtime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadDLPpat3
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadDLPpat2
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadDLPpat1
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vReadColorSeqFromEE
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_ubLoadAutoPlay
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModeSel
</UL>

<P><STRONG><a name="[9d]"></a>MEMORY_tRemapStatus</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, memory.o(i.MEMORY_tRemapStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tFlashWrite
</UL>

<P><STRONG><a name="[a1]"></a>MEMORY_tWrite</STRONG> (Thumb, 210 bytes, Stack size 80 bytes, memory.o(i.MEMORY_tWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRemapStatus
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tFlashWrite
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_vEntry
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vModeCtl
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreSubframeFullIns
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreSubframe
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreKengtimeFullIns
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreKengtime
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat3FullIns
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat3
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat2FullIns
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat2
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat1FullIns
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat1
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iSetAutoPlay
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vStoreColorSeqToEE
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vSetSubframeEESetting
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vSetRedPktEESetting
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vSetGreenPktEESetting
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vSetGapEESetting
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vSetBluePktEESetting
</UL>

<P><STRONG><a name="[1e]"></a>MRT_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.MRT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = MRT_IRQHandler &rArr; MRT_vISR &rArr; MRT_vISRz &rArr; TIMER_vStartEx &rArr; TIMER_MRT_vStart &rArr; TIMER_MRT_vSetInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRT_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[a2]"></a>MRT_vISR</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, timer.o(i.MRT_vISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = MRT_vISR &rArr; MRT_vISRz &rArr; TIMER_vStartEx &rArr; TIMER_MRT_vStart &rArr; TIMER_MRT_vSetInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRT_vISRz
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MRT_vClearChIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRT_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>MRT_vISRz</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, package.o(i.MRT_vISRz))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MRT_vISRz &rArr; TIMER_vStartEx &rArr; TIMER_MRT_vStart &rArr; TIMER_MRT_vSetInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vStartEx
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIdriverInterfaceRst
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSendPacket3
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSendPacket2
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSendPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRT_vISR
</UL>

<P><STRONG><a name="[98]"></a>Measure_iLoadDLPpat1</STRONG> (Thumb, 154 bytes, Stack size 56 bytes, measure.o(i.Measure_iLoadDLPpat1))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Measure_iLoadDLPpat1 &rArr; MEMORY_tRead &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vLoadData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[99]"></a>Measure_iLoadDLPpat2</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, measure.o(i.Measure_iLoadDLPpat2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Measure_iLoadDLPpat2 &rArr; MEMORY_tRead &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vLoadData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[9a]"></a>Measure_iLoadDLPpat3</STRONG> (Thumb, 152 bytes, Stack size 56 bytes, measure.o(i.Measure_iLoadDLPpat3))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Measure_iLoadDLPpat3 &rArr; MEMORY_tRead &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vLoadData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[97]"></a>Measure_iLoadKengtime</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, measure.o(i.Measure_iLoadKengtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Measure_iLoadKengtime &rArr; MEMORY_tRead &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vLoadData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[96]"></a>Measure_iLoadSubframe</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, measure.o(i.Measure_iLoadSubframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Measure_iLoadSubframe &rArr; MEMORY_tRead &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vLoadData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[75]"></a>Measure_iSetAutoPlay</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, measure.o(i.Measure_iSetAutoPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Measure_iSetAutoPlay &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[91]"></a>Measure_iStoreDLPpat1</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, measure.o(i.Measure_iStoreDLPpat1))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Measure_iStoreDLPpat1 &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vStoreData
</UL>

<P><STRONG><a name="[90]"></a>Measure_iStoreDLPpat1FullIns</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, measure.o(i.Measure_iStoreDLPpat1FullIns))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Measure_iStoreDLPpat1FullIns &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[93]"></a>Measure_iStoreDLPpat2</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, measure.o(i.Measure_iStoreDLPpat2))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Measure_iStoreDLPpat2 &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vStoreData
</UL>

<P><STRONG><a name="[92]"></a>Measure_iStoreDLPpat2FullIns</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, measure.o(i.Measure_iStoreDLPpat2FullIns))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Measure_iStoreDLPpat2FullIns &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[95]"></a>Measure_iStoreDLPpat3</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, measure.o(i.Measure_iStoreDLPpat3))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Measure_iStoreDLPpat3 &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vStoreData
</UL>

<P><STRONG><a name="[94]"></a>Measure_iStoreDLPpat3FullIns</STRONG> (Thumb, 140 bytes, Stack size 64 bytes, measure.o(i.Measure_iStoreDLPpat3FullIns))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = Measure_iStoreDLPpat3FullIns &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[8f]"></a>Measure_iStoreKengtime</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, measure.o(i.Measure_iStoreKengtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Measure_iStoreKengtime &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vStoreData
</UL>

<P><STRONG><a name="[8e]"></a>Measure_iStoreKengtimeFullIns</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, measure.o(i.Measure_iStoreKengtimeFullIns))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Measure_iStoreKengtimeFullIns &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[8d]"></a>Measure_iStoreSubframe</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, measure.o(i.Measure_iStoreSubframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Measure_iStoreSubframe &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vStoreData
</UL>

<P><STRONG><a name="[8c]"></a>Measure_iStoreSubframeFullIns</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, measure.o(i.Measure_iStoreSubframeFullIns))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = Measure_iStoreSubframeFullIns &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[ac]"></a>Measure_ubLoadAutoPlay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, measure.o(i.Measure_ubLoadAutoPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Measure_ubLoadAutoPlay &rArr; MEMORY_tRead &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>Measure_vGetBluePacketEESetting</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, measure.o(i.Measure_vGetBluePacketEESetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Measure_vGetBluePacketEESetting &rArr; MEMORY_tRead &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[7a]"></a>Measure_vGetGapEESetting</STRONG> (Thumb, 44 bytes, Stack size 48 bytes, measure.o(i.Measure_vGetGapEESetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Measure_vGetGapEESetting &rArr; MEMORY_tRead &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[7c]"></a>Measure_vGetGreenPacketEESetting</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, measure.o(i.Measure_vGetGreenPacketEESetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Measure_vGetGreenPacketEESetting &rArr; MEMORY_tRead &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[7b]"></a>Measure_vGetRedPacketEESetting</STRONG> (Thumb, 50 bytes, Stack size 48 bytes, measure.o(i.Measure_vGetRedPacketEESetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Measure_vGetRedPacketEESetting &rArr; MEMORY_tRead &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[79]"></a>Measure_vGetSubframeEESetting</STRONG> (Thumb, 44 bytes, Stack size 64 bytes, measure.o(i.Measure_vGetSubframeEESetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Measure_vGetSubframeEESetting &rArr; MEMORY_tRead &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[ad]"></a>Measure_vLoadData</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, measure.o(i.Measure_vLoadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Measure_vLoadData &rArr; Measure_iLoadDLPpat3 &rArr; MEMORY_tRead &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadSubframe
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadKengtime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadDLPpat3
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadDLPpat2
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadDLPpat1
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModeSel
</UL>

<P><STRONG><a name="[ae]"></a>Measure_vModeCtl</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, measure.o(i.Measure_vModeCtl))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Measure_vModeCtl &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vStoreData
</UL>

<P><STRONG><a name="[82]"></a>Measure_vSetBluePktEESetting</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, measure.o(i.Measure_vSetBluePktEESetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Measure_vSetBluePktEESetting &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[7f]"></a>Measure_vSetGapEESetting</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, measure.o(i.Measure_vSetGapEESetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Measure_vSetGapEESetting &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[81]"></a>Measure_vSetGreenPktEESetting</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, measure.o(i.Measure_vSetGreenPktEESetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Measure_vSetGreenPktEESetting &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[80]"></a>Measure_vSetRedPktEESetting</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, measure.o(i.Measure_vSetRedPktEESetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = Measure_vSetRedPktEESetting &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[7e]"></a>Measure_vSetSubframeEESetting</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, measure.o(i.Measure_vSetSubframeEESetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = Measure_vSetSubframeEESetting &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[74]"></a>Measure_vStoreData</STRONG> (Thumb, 252 bytes, Stack size 16 bytes, measure.o(i.Measure_vStoreData))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = Measure_vStoreData &rArr; Measure_iStoreSubframe &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vModeCtl
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreSubframe
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreKengtime
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat3
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat2
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vStoreColorSeqToEE
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[5]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>PININT0_vISR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, extint.o(i.PININT0_vISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PININT0_vISR
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_vClearRiseState
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_vClearFallState
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_bGetRiseState
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_bGetFallState
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT0_IRQHandler
</UL>

<P><STRONG><a name="[b4]"></a>PININT1_vISR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, extint.o(i.PININT1_vISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PININT1_vISR
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_vClearRiseState
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_vClearFallState
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_bGetRiseState
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_bGetFallState
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT1_IRQHandler
</UL>

<P><STRONG><a name="[b5]"></a>PININT2_vISR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, extint.o(i.PININT2_vISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PININT2_vISR
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_vClearRiseState
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_vClearFallState
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_bGetRiseState
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_bGetFallState
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT2_IRQHandler
</UL>

<P><STRONG><a name="[b6]"></a>PININT3_vISR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, extint.o(i.PININT3_vISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PININT3_vISR
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_vClearRiseState
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_vClearFallState
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_bGetRiseState
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTINT_bGetFallState
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT3_IRQHandler
</UL>

<P><STRONG><a name="[b7]"></a>PININT4_vISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, extint.o(i.PININT4_vISR))
<BR><BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PIN_INT4_IRQHandler
</UL>

<P><STRONG><a name="[11]"></a>PIN_INT0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.PIN_INT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT0_IRQHandler &rArr; PININT0_vISR
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT0_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PIN_INT1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.PIN_INT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT1_IRQHandler &rArr; PININT1_vISR
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT1_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PIN_INT2_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.PIN_INT2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT2_IRQHandler &rArr; PININT2_vISR
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT2_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PIN_INT3_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.PIN_INT3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PIN_INT3_IRQHandler &rArr; PININT3_vISR
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT3_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PIN_INT4_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.PIN_INT4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PIN_INT4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT4_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PIN_INT5_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.PIN_INT5_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>PIN_INT6_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.PIN_INT6_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>PIN_INT7_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.PIN_INT7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>PWRCTRL_vGetColorSEQ</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, pwrctrl.o(i.PWRCTRL_vGetColorSEQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PWRCTRL_vGetColorSEQ &rArr; vcom_write
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vReadColorSeqFromEE
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[b9]"></a>PWRCTRL_vInit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, pwrctrl.o(i.PWRCTRL_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = PWRCTRL_vInit &rArr; SCT1_Init &rArr; IO_SWM_vMovablePinAssignZ &rArr; IO_SWM_vMovablePinAssign
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCT_vInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCT1_vStart
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCT0_vStart
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCT1_Init
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCT0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[89]"></a>Package_vGetPacketParas</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, package.o(i.Package_vGetPacketParas))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Package_vGetPacketParas &rArr; vcom_write
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[bf]"></a>Package_vSendMessageInASubframe</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, package.o(i.Package_vSendMessageInASubframe))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = Package_vSendMessageInASubframe &rArr; TIMER_vStartEx &rArr; TIMER_MRT_vStart &rArr; TIMER_MRT_vSetInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vStartEx
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIO_teGet
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c1]"></a>Package_vTransParent</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, package.o(i.Package_vTransParent))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = Package_vTransParent &rArr; SPI_vSendDataBlocking &rArr; SPI_vSendFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_vSendDataBlocking
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIdriverInterfaceRst
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_nReceiveData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_bGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a6]"></a>Packet_vSendPacket</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, package.o(i.Packet_vSendPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Packet_vSendPacket &rArr; SPI_vSendDataBlocking &rArr; SPI_vSendFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_vSendDataBlocking
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_nReceiveData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_bGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRT_vISRz
</UL>

<P><STRONG><a name="[a8]"></a>Packet_vSendPacket2</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, package.o(i.Packet_vSendPacket2))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Packet_vSendPacket2 &rArr; SPI_vSendDataBlocking &rArr; SPI_vSendFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_vSendDataBlocking
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_nReceiveData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_bGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRT_vISRz
</UL>

<P><STRONG><a name="[a9]"></a>Packet_vSendPacket3</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, package.o(i.Packet_vSendPacket3))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Packet_vSendPacket3 &rArr; SPI_vSendDataBlocking &rArr; SPI_vSendFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_vSendDataBlocking
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_nReceiveData
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_bGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRT_vISRz
</UL>

<P><STRONG><a name="[9b]"></a>Packet_vSetGapTime</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, package.o(i.Packet_vSetGapTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Packet_vSetGapTime &rArr; vcom_write
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[86]"></a>Packet_vSetPartPacket</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, package.o(i.Packet_vSetPartPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Packet_vSetPartPacket &rArr; vcom_write
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[85]"></a>Packet_vSetWholePacket</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, package.o(i.Packet_vSetWholePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Packet_vSetWholePacket &rArr; vcom_write
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>Pwrctrl_vGerKengTime</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pwrctrl.o(i.Pwrctrl_vGerKengTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pwrctrl_vGerKengTime &rArr; vcom_write
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[87]"></a>Pwrctrl_vGetSubframePeriod</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pwrctrl.o(i.Pwrctrl_vGetSubframePeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pwrctrl_vGetSubframePeriod &rArr; vcom_write
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[8b]"></a>Pwrctrl_vReadColorSeqFromEE</STRONG> (Thumb, 440 bytes, Stack size 48 bytes, pwrctrl.o(i.Pwrctrl_vReadColorSeqFromEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Pwrctrl_vReadColorSeqFromEE &rArr; MEMORY_tRead &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCTRL_vGetColorSEQ
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModeSel
</UL>

<P><STRONG><a name="[84]"></a>Pwrctrl_vSetKengTime</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, pwrctrl.o(i.Pwrctrl_vSetKengTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Pwrctrl_vSetKengTime &rArr; vcom_write
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[83]"></a>Pwrctrl_vSetSubframePeriod</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, pwrctrl.o(i.Pwrctrl_vSetSubframePeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pwrctrl_vSetSubframePeriod &rArr; vcom_write
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>

<P><STRONG><a name="[8a]"></a>Pwrctrl_vStoreColorSeqToEE</STRONG> (Thumb, 432 bytes, Stack size 32 bytes, pwrctrl.o(i.Pwrctrl_vStoreColorSeqToEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = Pwrctrl_vStoreColorSeqToEE &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_ubCrc8
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vStoreData
</UL>

<P><STRONG><a name="[36]"></a>QEI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.QEI_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RIT_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.RIT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RIT_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[c5]"></a>RIT_vISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, timer.o(i.RIT_vISR))
<BR><BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RIT_IRQHandler
</UL>

<P><STRONG><a name="[37]"></a>RTC_ALARM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.RTC_ALARM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTC_WAKE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.RTC_WAKE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SCT0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.SCT0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCT0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCT0_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>SCT0_vISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sct.o(i.SCT0_vISR))
<BR><BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCT0_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>SCT0_vStart</STRONG> (Thumb, 264 bytes, Stack size 0 bytes, pwrctrl.o(i.SCT0_vStart))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCTRL_vInit
</UL>

<P><STRONG><a name="[1b]"></a>SCT1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.SCT1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SCT1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCT1_IRQHandlerzz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>SCT1_IRQHandlerzz</STRONG> (Thumb, 744 bytes, Stack size 0 bytes, pwrctrl.o(i.SCT1_IRQHandlerzz))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCT1_IRQHandler
</UL>

<P><STRONG><a name="[be]"></a>SCT1_vStart</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, pwrctrl.o(i.SCT1_vStart))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCTRL_vInit
</UL>

<P><STRONG><a name="[1c]"></a>SCT2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SCT2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SCT3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SCT3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[ba]"></a>SCT_vInit</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, sct.o(i.SCT_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SCT_vInit &rArr; SYSCTL_vPeriphReset
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_vPeriphReset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLOCK_vEnablePeriphClock
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCTRL_vInit
</UL>

<P><STRONG><a name="[23]"></a>SPI0_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.SPI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[c9]"></a>SPI0_vISR</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ssi.o(i.SPI0_vISR))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI0_IRQHandler
</UL>

<P><STRONG><a name="[24]"></a>SPI1_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.SPI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>SPI1_vISR</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ssi.o(i.SPI1_vISR))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_IRQHandler
</UL>

<P><STRONG><a name="[cb]"></a>SPI_vConfig</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, ssi.o(i.SPI_vConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_vConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_vDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_vInit
</UL>

<P><STRONG><a name="[cd]"></a>SPI_vInit</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, ssi.o(i.SPI_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SPI_vInit &rArr; SPI_vConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_vPeriphReset
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_vConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>SPI_vSendDataBlocking</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, ssi.o(i.SPI_vSendDataBlocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI_vSendDataBlocking &rArr; SPI_vSendFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_vSendFrame
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_nGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_vTransParent
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSendPacket3
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSendPacket2
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSendPacket
</UL>

<P><STRONG><a name="[d0]"></a>SPI_vStart</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ssi.o(i.SPI_vStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPI_vStart
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_nGetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>SPIdriverInterfaceRst</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, package.o(i.SPIdriverInterfaceRst))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SPIdriverInterfaceRst
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_GPIO_vSetPortMaskedState
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_vTransParent
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRT_vISRz
</UL>

<P><STRONG><a name="[7]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SYSCTL_vPeriphReset</STRONG> (Thumb, 156 bytes, Stack size 8 bytes, system.o(i.SYSCTL_vPeriphReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SYSCTL_vPeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCT_vInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_vInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_bInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_vInit
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MRT_vInit
</UL>

<P><STRONG><a name="[d2]"></a>SYSTEM_vInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, system.o(i.SYSTEM_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SYSTEM_vInit &rArr; Chip_SetupXtalClocking
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupXtalClocking
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[d3]"></a>SYSTICK_vISR</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, timer.o(i.SYSTICK_vISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = SYSTICK_vISR &rArr;  SysTick_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[73]"></a>StartModeSel</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, app.o(i.StartModeSel))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = StartModeSel &rArr; Measure_vLoadData &rArr; Measure_iLoadDLPpat3 &rArr; MEMORY_tRead &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vReadColorSeqFromEE
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vLoadData
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; SYSTICK_vISR &rArr;  SysTick_Handler (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_vISR
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTICK_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sysinit.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemInit &rArr; INTERRUPT_vInit &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_vInit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERRUPT_vInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>TIMER_vInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, timer.o(i.TIMER_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIMER_vInit &rArr; TIMER_MRT_vInit &rArr; TIMER_vStop &rArr; TIMER_MRT_vSetInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MRT_vInit
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>TIMER_vStartEx</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, timer.o(i.TIMER_vStartEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TIMER_vStartEx &rArr; TIMER_MRT_vStart &rArr; TIMER_MRT_vSetInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MRT_vStart
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_vSendMessageInASubframe
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRT_vISRz
</UL>

<P><STRONG><a name="[d5]"></a>TIMER_vStop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, timer.o(i.TIMER_vStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIMER_vStop &rArr; TIMER_MRT_vSetInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MRT_vSetInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MRT_vInit
</UL>

<P><STRONG><a name="[1f]"></a>UART0_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.UART0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>UART1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.UART1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>UART2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.UART2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>USBWakeup_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.USBWakeup_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_FIQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, interrupt.o(i.USB_FIQHandler))
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>USB_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.USB_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_IRQHandler &rArr; USB_IRQHandlerzz
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandlerzz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[da]"></a>USB_IRQHandlerzz</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, cdc_vcom.o(i.USB_IRQHandlerzz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_IRQHandlerzz
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>USB_getCmd</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, app.o(i.USB_getCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = USB_getCmd &rArr; Instruction_vGetCmd &rArr; Measure_iStoreDLPpat3FullIns &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_bread
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dd]"></a>WATCHDOG_WRN_vISR</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, watchdog.o(i.WATCHDOG_WRN_vISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = WATCHDOG_WRN_vISR &rArr; WATCHDOG_vClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_vClearStatus
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_bGetOption
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WDT_IRQHandler
</UL>

<P><STRONG><a name="[a]"></a>WDT_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, interrupt.o(i.WDT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = WDT_IRQHandler &rArr; WATCHDOG_WRN_vISR &rArr; WATCHDOG_vClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_WRN_vISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> keil_startup_lpc15xx.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>find_IntfDesc</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, cdc_vcom.o(i.find_IntfDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = find_IntfDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_init
</UL>

<P><STRONG><a name="[47]"></a>main</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, app.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = main &rArr; USB_getCmd &rArr; Instruction_vGetCmd &rArr; Measure_iStoreDLPpat3FullIns &rArr; MEMORY_tWrite &rArr; MEMORY_tFlashWrite &rArr; IAP_tPreSectorForWrite &rArr; IAP_vEntry
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_init
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_vStart
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_vInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_vTransParent
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_vSendMessageInASubframe
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCTRL_vInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_ubLoadAutoPlay
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_bInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_SWM_vMovablePinAssignZ
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_getCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModeSel
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[e1]"></a>usb_init</STRONG> (Thumb, 132 bytes, Stack size 96 bytes, cdc_vcom.o(i.usb_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = usb_init &rArr; vcom_init &rArr; find_IntfDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_init
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB_Init
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[dc]"></a>vcom_bread</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, cdc_vcom.o(i.vcom_bread))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vcom_bread
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_getCmd
</UL>

<P><STRONG><a name="[e2]"></a>vcom_init</STRONG> (Thumb, 172 bytes, Stack size 96 bytes, cdc_vcom.o(i.vcom_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = vcom_init &rArr; find_IntfDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_IntfDesc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_init
</UL>

<P><STRONG><a name="[76]"></a>vcom_write</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, cdc_vcom.o(i.vcom_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vcom_write
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetSubframeEESetting
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetRedPacketEESetting
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetGreenPacketEESetting
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetGapEESetting
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vGetBluePacketEESetting
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreSubframeFullIns
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreSubframe
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreKengtimeFullIns
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreKengtime
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat3FullIns
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat3
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat2FullIns
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat2
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat1FullIns
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iStoreDLPpat1
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iSetAutoPlay
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadSubframe
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadKengtime
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadDLPpat3
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadDLPpat2
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_iLoadDLPpat1
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vStoreColorSeqToEE
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vSetSubframePeriod
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vSetKengTime
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vGetSubframePeriod
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vGerKengTime
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCTRL_vGetColorSEQ
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pwrctrl_vReadColorSeqFromEE
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_vTransParent
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vLoadData
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Instruction_vGetCmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_getCmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartModeSel
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSetWholePacket
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSetPartPacket
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSetGapTime
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_vGetPacketParas
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vStoreData
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vSetSubframeEESetting
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vSetRedPktEESetting
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vSetGreenPktEESetting
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vSetGapEESetting
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Measure_vSetBluePktEESetting
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b8]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pwrctrl.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCTRL_vGetColorSEQ
</UL>

<P><STRONG><a name="[bb]"></a>SCT0_Init</STRONG> (Thumb, 480 bytes, Stack size 8 bytes, pwrctrl.o(i.SCT0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SCT0_Init &rArr; IO_SWM_vMovablePinAssignZ &rArr; IO_SWM_vMovablePinAssign
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_SWM_vMovablePinAssignZ
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCTRL_vInit
</UL>

<P><STRONG><a name="[bc]"></a>SCT1_Init</STRONG> (Thumb, 362 bytes, Stack size 8 bytes, pwrctrl.o(i.SCT1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SCT1_Init &rArr; IO_SWM_vMovablePinAssignZ &rArr; IO_SWM_vMovablePinAssign
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_SWM_vEnableFixedPinZ
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_SWM_vMovablePinAssignZ
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWRCTRL_vInit
</UL>

<P><STRONG><a name="[e4]"></a>NVIC_DisableIRQ</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, cdc_vcom.o(i.NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_bread
</UL>

<P><STRONG><a name="[e3]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, cdc_vcom.o(i.NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_write
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vcom_bread
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usb_init
</UL>

<P><STRONG><a name="[5e]"></a>SYSCTL_vPowerUp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, cdc_vcom.o(i.SYSCTL_vPowerUp))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_USB_Init
</UL>

<P><STRONG><a name="[3b]"></a>VCOM_SetLineCode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cdc_vcom.o(i.VCOM_SetLineCode))
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(i.vcom_init)
</UL>
<P><STRONG><a name="[3c]"></a>VCOM_bulk_in_hdlr</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, cdc_vcom.o(i.VCOM_bulk_in_hdlr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = VCOM_bulk_in_hdlr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(i.vcom_init)
</UL>
<P><STRONG><a name="[3d]"></a>VCOM_bulk_out_hdlr</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, cdc_vcom.o(i.VCOM_bulk_out_hdlr))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = VCOM_bulk_out_hdlr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cdc_vcom.o(i.vcom_init)
</UL>
<P><STRONG><a name="[c0]"></a>IO_GPIO_teGet</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, package.o(i.IO_GPIO_teGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = IO_GPIO_teGet
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_vSendMessageInASubframe
</UL>

<P><STRONG><a name="[d1]"></a>IO_GPIO_vSetPortMaskedState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, package.o(i.IO_GPIO_vSetPortMaskedState))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIdriverInterfaceRst
</UL>

<P><STRONG><a name="[c3]"></a>SPI_bGetStatus</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, package.o(i.SPI_bGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_vTransParent
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSendPacket3
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSendPacket2
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSendPacket
</UL>

<P><STRONG><a name="[c4]"></a>SPI_nReceiveData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, package.o(i.SPI_nReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Package_vTransParent
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSendPacket3
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSendPacket2
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Packet_vSendPacket
</UL>

<P><STRONG><a name="[54]"></a>ACMP_bGetIntStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, acmp.o(i.ACMP_bGetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_vISR
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_vISR
</UL>

<P><STRONG><a name="[55]"></a>ACMP_vClearIntStatus</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, acmp.o(i.ACMP_vClearIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP1_vISR
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_vISR
</UL>

<P><STRONG><a name="[b2]"></a>EXTINT_bGetFallState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, extint.o(i.EXTINT_bGetFallState))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT3_vISR
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT2_vISR
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT1_vISR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT0_vISR
</UL>

<P><STRONG><a name="[b0]"></a>EXTINT_bGetRiseState</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, extint.o(i.EXTINT_bGetRiseState))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT3_vISR
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT2_vISR
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT1_vISR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT0_vISR
</UL>

<P><STRONG><a name="[b3]"></a>EXTINT_vClearFallState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, extint.o(i.EXTINT_vClearFallState))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT3_vISR
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT2_vISR
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT1_vISR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT0_vISR
</UL>

<P><STRONG><a name="[b1]"></a>EXTINT_vClearRiseState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, extint.o(i.EXTINT_vClearRiseState))
<BR><BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT3_vISR
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT2_vISR
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT1_vISR
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PININT0_vISR
</UL>

<P><STRONG><a name="[63]"></a>IAP_vEntry</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, iap.o(i.IAP_vEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_vEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tPreSectorForWrite
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tErasePage
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IAP_tCopyRamToFlash
</UL>

<P><STRONG><a name="[67]"></a>NVIC_EncodePriority</STRONG> (Thumb, 64 bytes, Stack size 20 bytes, interrupt.o(i.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERRUPT_vInit
</UL>

<P><STRONG><a name="[68]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, interrupt.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;INTERRUPT_vInit
</UL>

<P><STRONG><a name="[6e]"></a>CLOCK_vEnablePeriphClock</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, io.o(i.CLOCK_vEnablePeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_bInit
</UL>

<P><STRONG><a name="[6f]"></a>IO_DIOCON_vConfig</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, io.o(i.IO_DIOCON_vConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IO_DIOCON_vConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_bInit
</UL>

<P><STRONG><a name="[70]"></a>IO_GPIO_vSetDir</STRONG> (Thumb, 148 bytes, Stack size 28 bytes, io.o(i.IO_GPIO_vSetDir))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = IO_GPIO_vSetDir
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_bInit
</UL>

<P><STRONG><a name="[71]"></a>IO_SWM_vDisableFixedPin</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, io.o(i.IO_SWM_vDisableFixedPin))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_bInit
</UL>

<P><STRONG><a name="[6a]"></a>IO_SWM_vEnableFixedPin</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, io.o(i.IO_SWM_vEnableFixedPin))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_SWM_vEnableFixedPinZ
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_bInit
</UL>

<P><STRONG><a name="[6c]"></a>IO_SWM_vMovablePinAssign</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, io.o(i.IO_SWM_vMovablePinAssign))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IO_SWM_vMovablePinAssign
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_bInit
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_SWM_vMovablePinAssignZ
</UL>

<P><STRONG><a name="[61]"></a>EEPROM_vInit</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, memory.o(i.EEPROM_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EEPROM_vInit &rArr; SYSCTL_vPeriphReset
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_vPeriphReset
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tInit
</UL>

<P><STRONG><a name="[a0]"></a>IAP_vEntry</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, memory.o(i.IAP_vEntry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IAP_vEntry
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tWrite
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMORY_tRead
</UL>

<P><STRONG><a name="[c8]"></a>CLOCK_vEnablePeriphClock</STRONG> (Thumb, 80 bytes, Stack size 0 bytes, sct.o(i.CLOCK_vEnablePeriphClock))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SCT_vInit
</UL>

<P><STRONG><a name="[cf]"></a>SPI_nGetStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ssi.o(i.SPI_nGetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_vStart
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_vSendDataBlocking
</UL>

<P><STRONG><a name="[cc]"></a>SPI_vDisable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ssi.o(i.SPI_vDisable))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_vConfig
</UL>

<P><STRONG><a name="[ce]"></a>SPI_vSendFrame</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, ssi.o(i.SPI_vSendFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_vSendFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_vSendDataBlocking
</UL>

<P><STRONG><a name="[5c]"></a>CLOCK_vSetMainBClockSource</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system.o(i.CLOCK_vSetMainBClockSource))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupXtalClocking
</UL>

<P><STRONG><a name="[5b]"></a>SYSCTL_vPowerUp</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, system.o(i.SYSCTL_vPowerUp))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Chip_SetupXtalClocking
</UL>

<P><STRONG><a name="[de]"></a>WATCHDOG_bGetOption</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, watchdog.o(i.WATCHDOG_bGetOption))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_WRN_vISR
</UL>

<P><STRONG><a name="[e0]"></a>WATCHDOG_vClearOption</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, watchdog.o(i.WATCHDOG_vClearOption))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_vClearStatus
</UL>

<P><STRONG><a name="[df]"></a>WATCHDOG_vClearStatus</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, watchdog.o(i.WATCHDOG_vClearStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WATCHDOG_vClearStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_vClearOption
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WATCHDOG_WRN_vISR
</UL>

<P><STRONG><a name="[a3]"></a>TIMER_MRT_vClearChIntStatus</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, timer.o(i.TIMER_MRT_vClearChIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MRT_vISR
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MRT_vStart
</UL>

<P><STRONG><a name="[d4]"></a>TIMER_MRT_vInit</STRONG> (Thumb, 164 bytes, Stack size 8 bytes, timer.o(i.TIMER_MRT_vInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIMER_MRT_vInit &rArr; TIMER_vStop &rArr; TIMER_MRT_vSetInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCTL_vPeriphReset
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vStop
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MRT_vIntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vInit
</UL>

<P><STRONG><a name="[d6]"></a>TIMER_MRT_vIntDisable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, timer.o(i.TIMER_MRT_vIntDisable))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MRT_vInit
</UL>

<P><STRONG><a name="[d8]"></a>TIMER_MRT_vSetInterval</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, timer.o(i.TIMER_MRT_vSetInterval))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIMER_MRT_vSetInterval
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vStop
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MRT_vStart
</UL>

<P><STRONG><a name="[d7]"></a>TIMER_MRT_vStart</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timer.o(i.TIMER_MRT_vStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TIMER_MRT_vStart &rArr; TIMER_MRT_vSetInterval
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MRT_vSetInterval
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_MRT_vClearChIntStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_vStartEx
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
